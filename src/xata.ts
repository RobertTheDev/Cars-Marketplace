// Generated by Xata Codegen 0.23.2. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "cars",
    columns: [
      { name: "createdAt", type: "datetime", defaultValue: "now" },
      { name: "make", type: "string" },
      { name: "model", type: "string" },
      { name: "year", type: "int" },
      { name: "seller", type: "link", link: { table: "users" } },
      { name: "colour", type: "string" },
      { name: "doors", type: "int" },
      { name: "engineSize", type: "float" },
      { name: "fuelType", type: "string" },
      { name: "gearbox", type: "string" },
      { name: "mileage", type: "int" },
      { name: "price", type: "float" },
      { name: "currency", type: "string", defaultValue: "GBP" },
      { name: "seats", type: "int" },
      { name: "description", type: "text" },
      {
        name: "image",
        type: "link",
        link: { table: "car_images" },
        unique: true,
      },
    ],
  },
  {
    name: "favourites",
    columns: [
      { name: "car", type: "link", link: { table: "cars" } },
      { name: "user", type: "link", link: { table: "users" } },
      { name: "createdAt", type: "datetime", defaultValue: "now" },
    ],
  },
  {
    name: "chats",
    columns: [{ name: "createdAt", type: "datetime", defaultValue: "now" }],
  },
  {
    name: "chat_messages",
    columns: [
      { name: "createdAt", type: "datetime", defaultValue: "now" },
      { name: "user", type: "link", link: { table: "users" } },
      { name: "chat", type: "link", link: { table: "chats" } },
    ],
  },
  {
    name: "chat_members",
    columns: [
      { name: "createdAt", type: "datetime", defaultValue: "now" },
      { name: "user", type: "link", link: { table: "users" } },
      { name: "chat", type: "link", link: { table: "chats" } },
    ],
  },
  {
    name: "car_images",
    columns: [
      { name: "createdAt", type: "datetime", defaultValue: "now" },
      { name: "url", type: "string" },
      { name: "car", type: "link", link: { table: "cars" } },
      { name: "alt", type: "string" },
    ],
  },
  {
    name: "users",
    columns: [
      { name: "createdAt", type: "datetime", defaultValue: "now" },
      { name: "firstName", type: "string" },
      { name: "lastName", type: "string" },
      { name: "profileImage", type: "string" },
      { name: "email", type: "email" },
      { name: "phoneNumber", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Cars = InferredTypes["cars"];
export type CarsRecord = Cars & XataRecord;

export type Favourites = InferredTypes["favourites"];
export type FavouritesRecord = Favourites & XataRecord;

export type Chats = InferredTypes["chats"];
export type ChatsRecord = Chats & XataRecord;

export type ChatMessages = InferredTypes["chat_messages"];
export type ChatMessagesRecord = ChatMessages & XataRecord;

export type ChatMembers = InferredTypes["chat_members"];
export type ChatMembersRecord = ChatMembers & XataRecord;

export type CarImages = InferredTypes["car_images"];
export type CarImagesRecord = CarImages & XataRecord;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  cars: CarsRecord;
  favourites: FavouritesRecord;
  chats: ChatsRecord;
  chat_messages: ChatMessagesRecord;
  chat_members: ChatMembersRecord;
  car_images: CarImagesRecord;
  users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Robert-s-workspace-f23idh.eu-west-1.xata.sh/db/cars-marketplace",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
